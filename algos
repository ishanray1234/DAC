//merge sort
#include <stdio.h>

void printArray(int A[], int size)
{
    for (int i = 0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}

void merge(int arr[],int l,int m,int n)
{
    int x=l-m+2;
    int y=n-l+1;
    int a[x],b[y];
    a[x-1]=19999;
    b[y-1]=19999;
    for(int i=0;i<x-1;i++)
        a[i]=arr[m+i];
    for(int j=0;j<y-1;j++)
        b[j]=arr[l+j+1];
    int temp=m,t1=0,t2=0;
    while(temp<n-m+1)
    {
        if(a[t1]<b[t2])
        {
            arr[temp]=a[t1];t1++;
        }
            
        else
        {
            arr[temp]=b[t2];t2++;
        }
        temp++;
    }
}

void mergesort(int arr[],int m,int n)
{
    if(m<n)
    {
        int l=(n+m)/2;
        mergesort(arr,m,l);
        mergesort(arr,l+1,n);
    
        merge(arr,l,m,n);
    }
}
int main ()
{
    int arr[] = { 12, 11, 13, 5, 6, 7 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);
  
    printf("Given array is \n");
    printArray(arr, arr_size);
  
    mergesort(arr, 0, arr_size-1);
  
    printf("\nSorted array is \n");
    printArray(arr, arr_size);
   
  return 0;
}

#include <stdio.h>

int max(int a,int b)
{
    return (a>b)? a:b;
}

int betw(int arr[],int n,int m,int l)
{
    int sum1=-1,sum2=-1,ans=0;
    for(int i=l;i>=n;i--)
    {
        ans=+arr[i];
        if(ans>sum1)
            sum1=ans;
    }
    ans=0;
    for(int i=l+1;i<=m;i++)
    {
        ans=+arr[i];
        if(ans>sum2)
            sum2=ans;
    }
    
    return max(sum1 + sum2 - arr[m],max(sum1, sum2));
}
int maxsum(int arr[],int n,int m)
{
    if (n > m)
          return -1999;
    // Base Case: Only one element
    if (n == m)
        return arr[n];
 
    int l=(m+n)/2;
    int x= maxsum(arr,n,l-1);
    int y= maxsum(arr,l+1,m);
    int z= betw(arr,n,m,l);
   
   return max(x,max(y,z));
}
 
// Driver Code
int main()
{
    int arr[] = { 2, 3, 4, 5, 7 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_sum = maxsum(arr, 0, n - 1);
    printf("Maximum contiguous sum is %d\n", max_sum);
    
    return 0;
}
